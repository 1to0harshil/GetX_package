import 'package:flutter/material.dart';
import 'package:get_x_structure/src/app/core/storage/get_storage_helper.dart';
import 'package:sizer/sizer.dart';

import 'colors.dart';

class ThemeHelper {
  // The current app theme
  final _appTheme = GetStorageHelper().getString(GetStorageHelper.themeType);

// A map of custom color themes supported by the app
  final Map<String, ColorsBase> _supportedCustomColor = {
    'light': LightColors(),
    'dark': DarkColors(),
  };

// A map of color schemes supported by the app
  final Map<String, ColorScheme> _supportedColorScheme = {
    'light': ColorSchemes.primaryColorScheme,
    'dark': ColorSchemes.secondaryColorScheme,
  };

  ColorsBase _getThemeColors() {
    // if (!_supportedCustomColor.containsKey(_appTheme)) {
    //   throw Exception(
    //       '$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner');
    // }
    //return theme from map

    return _supportedCustomColor[_appTheme] ?? LightColors();
  }

  ThemeData _getThemeData() {
    //throw exception to notify given theme is not found or not generated by the generator
    // if (!_supportedColorScheme.containsKey(_appTheme)) {
    //   throw Exception(
    //       '$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner');
    // }
    //return theme from map

    final colorScheme =
        _supportedColorScheme[_appTheme] ?? ColorSchemes.primaryColorScheme;
    return ThemeData(
      visualDensity: VisualDensity.standard,
      colorScheme: colorScheme,
      textTheme: TextThemes.textTheme(colorScheme),
      scaffoldBackgroundColor: colorScheme.primaryContainer,
      useMaterial3: false,
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
          backgroundColor: appTheme.gray900,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(12.h),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      dividerTheme: DividerThemeData(
        thickness: 1,
        space: 1,
        color: appTheme.blueGray400.withValues(alpha:0.53),
      ),
    );
  }

  /// Returns the primary colors for the current theme.
  ColorsBase themeColor() => _getThemeColors();

  /// Returns the current theme data.
  ThemeData themeData() => _getThemeData();
}

mixin TextThemes {
  static TextTheme textTheme(ColorScheme colorScheme) => TextTheme(
        bodyLarge: TextStyle(
          color: appTheme.whiteA70001,
          fontSize: 16.sp,
          fontFamily: 'SF Pro Text',
          fontWeight: FontWeight.w400,
        ),
        bodyMedium: TextStyle(
          color: colorScheme.onPrimaryContainer,
          fontSize: 14.sp,
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w400,
        ),
        bodySmall: TextStyle(
          color: colorScheme.onPrimaryContainer,
          fontSize: 12.sp,
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w400,
        ),
        headlineSmall: TextStyle(
          color: appTheme.whiteA70001,
          fontSize: 24.sp,
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w600,
        ),
        labelLarge: TextStyle(
          color: appTheme.whiteA70001,
          fontSize: 12.sp,
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w500,
        ),
        titleLarge: TextStyle(
          color: appTheme.whiteA70001,
          fontSize: 20.sp,
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w600,
        ),
        titleMedium: TextStyle(
          color: appTheme.whiteA70001,
          fontSize: 16.sp,
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w500,
        ),
        titleSmall: TextStyle(
          color: appTheme.whiteA70001,
          fontSize: 14.sp,
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w500,
        ),
      );
}

class ColorSchemes {
  static const primaryColorScheme = ColorScheme.light(
    // Primary colors
    primary: Color(0XFF6D61F2),
    primaryContainer: Color(0XFF191928),
    secondaryContainer: Color(0XFF000001),

    // On colors(text colors)
    onPrimary: Color(0XFF18172B),
    onPrimaryContainer: Color(0XFF9B97B6),
    onSecondaryContainer: Color(0XFF333333),
  );
  static const secondaryColorScheme = ColorScheme.dark(
    // Primary colors
    primary: Color(0XFF6D61F2),
    primaryContainer: Color(0XFF191928),
    secondaryContainer: Color(0XFF000001),

    // On colors(text colors)
    onPrimary: Color(0XFF18172B),
    onPrimaryContainer: Color(0XFF9B97B6),
    onSecondaryContainer: Color(0XFF333333),
  );
}

ColorsBase get appTheme => ThemeHelper().themeColor();

ThemeData get theme => ThemeHelper().themeData();
